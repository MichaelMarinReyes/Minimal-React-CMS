package analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;

class Parser;
parser code {:
    private String texto = "";

    public String getTexto() {
        return texto;
    }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            try {
                throw new Exception("Error sintáctico en la columna " + (s.right) + ": " + message);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        } else {
            System.err.println("Error sintáctico: " + message);
        }
    }

    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);
        Symbol symbol = (Symbol)info;
        throw new Exception("El texto ingresado es incorrecto, por favor revise la sintaxis y vuelva a intentarlo.");

    }
:}

terminal ID, BODY, GET, POST, PATCH, DELETE, SUCCESS, NOT_FOUND, INTERNAL_SERVER_ERROR, SITIO, PAGINA, CREAR, AGREGAR, ELIMINAR, MODIFICAR, NOMBRE, PATH, CORCHETE_ABRE, CORCHETE_CIERRA, IGUAL;
terminal NUMERO, CADENA,CARACTER,TRUE, FALSE, VOID, COMENTARIO_TOML, ATRIBUTO_PATH, PUNTO;
non terminal inicial, metodos, objetivo, request, sCL_instruccion, parametros, body, response, codigo, lenguajeToml, etiquetas, atributos, path, accion, prueba, id_etiqueta;

precedence left CREAR, AGREGAR, ELIMINAR, MODIFICAR;

start with lenguajeToml;

prueba ::= body:pr {:texto = "prueba: " + String.valueOf(pr);:}
            | request:pr {:texto = "prueba: " + String.valueOf(pr);:}
            | response:pr {:texto = "prueba: " + String.valueOf(pr);:};

inicial ::= request:request                 {: texto = "req: " + String.valueOf(request); :}
          | response:response               {: texto = "resp: " + String.valueOf(response); :}
          | lenguajeToml:toml               {: texto = "toml: " + String.valueOf(toml); :};

//LENGUAJE SHTTP
//request ::= metodos:met objetivo:ob sCL_instruccion:scl body:bod {: RESULT = String.valueOf(met + " " + ob + " " + scl + " " + bod); :};
request ::= metodos:met objetivo:ob sCL_instruccion:scl {: System.out.println("http sin body "  + String.valueOf(met) + " " + String.valueOf(ob) + " " + String.valueOf(scl));RESULT = String.valueOf(met + " " + ob + " " + scl); :};

metodos ::= GET:req                          {: RESULT = req; :} //metodos
          | POST:req                         {: RESULT = req; :}
          | PATCH:req                        {: RESULT = req; :}
          | DELETE:req                       {: RESULT = req; :};
         // | error:er                         {: report_error("Se esperaba alguna de las siguientes request: \"get\" \"post\" \"patch\" \"delete\"", er); :};

objetivo ::= SITIO:ob                        {: RESULT = ob; :}
           | PAGINA:ob                       {: RESULT = ob; :};
           //| error:er                        {: report_error("Se esperaba \"sitio\" o \"pagina\"", er); :};

sCL_instruccion ::= accion:ac objetivo:ob parametros:param {: RESULT = String.valueOf(ac + " " + ob + " " + param); :};

accion ::= CREAR:crud                        {: RESULT = crud; :}
         | AGREGAR:crud                      {: RESULT = crud; :}
         | ELIMINAR:crud                     {: RESULT = crud; :}
         | MODIFICAR:crud                    {: RESULT = crud; :}
         | error:er                          {: report_error("Se esperaba alguna de las siguientes instrucciones: \"crear\" \"agregar\" \"eliminar\" \"modificar\"", er); :};

parametros ::= ID:id                         {: RESULT = id;:}
             | ID:id parametros:param        {: RESULT = String.valueOf(id + " " + param);:};

body ::= BODY:body {:System.out.println("body: " + String.valueOf(body)); RESULT = body;:};

response ::= codigo:response {:System.out.println("response sin body"); RESULT = response; :};// body;


codigo ::= SUCCESS:cod                       {: RESULT = cod; :}
         | NOT_FOUND:cod                     {: RESULT = cod; :}
         | INTERNAL_SERVER_ERROR:cod         {: RESULT = cod; :};

//LENGUAJE TOML
lenguajeToml ::= etiquetas:eti atributos:att                            {: RESULT = eti.toString() + " " + att.toString(); :};

etiquetas ::= CORCHETE_ABRE:ab ID:id CORCHETE_CIERRA:ci                 {: RESULT = ab.toString() + " " + id.toString() + " " + ci.toString(); :}
            | CORCHETE_ABRE:ab id_etiqueta:id CORCHETE_CIERRA:ci        {: RESULT = ab.toString() + " " + id.toString() + " " + ci.toString(); :};

id_etiqueta ::= ID:id PUNTO:pt ID:ids                                   {: RESULT = id.toString() + pt.toString() + ids.toString(); :}
              | ID:id PUNTO:pt id_etiqueta:ids                          {: RESULT = id.toString() + pt.toString() + ids.toString(); :};

atributos ::= NOMBRE:nombre IGUAL:igual CADENA:cadena                   {: RESULT = nombre.toString() + igual.toString() + cadena.toString(); :}
            | PATH:path IGUAL:igual ATRIBUTO_PATH:id                    {: System.out.println(path.toString() + " " + igual.toString() + " " + id.toString()); RESULT = path.toString() + " " + igual.toString() + " " + id.toString(); :}
            ;//| PATH:path IGUAL:igual ATRIBUTO_PATH:atrPath;
