package analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;

class Parser;
parser code {:
    private String texto = "";
    public static ArrayList<ErrorSintactico> erroresSintactico = new ArrayList<>();

    public String getTexto() {
        return texto;
    }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            try {
                throw new Exception("Error sintáctico en la columna " + (s.right) + ": " + message);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        } else {
            System.err.println("Error sintáctico: " + message);
        }
    }

    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);
        Symbol symbol = (Symbol)info;
        throw new Exception("El texto ingresado es incorrecto, por favor revise la sintaxis y vuelva a intentarlo.");

    }
:}

//terminal GET, POST, PATCH, DELETE, SUCCESS, NOT_FOUND, INTERNAL_SERVER_ERROR, SITIO_SHTTP, PAGINA_SHTTP, SITIO_SCL, PAGINA_SCL, CREAR, AGREGAR, ELIMINAR, MODIFICAR, NOMBRE_TOML, PATH, TRUE, FALSE;
terminal VOID, MAIN, CONST, VAR, STRING, NUMBER, RETURN, FUNCTION, H1, H2, H3,H4, H5, H6, PARRAFO_ABRIR, PARRAFO_CERRAR, INPUT, VALUE, BUTTON, ONCLICK, CORCHETE_ABRE, CORCHETE_CIERRA, LLAVE_ABRE, LLAVE_CIERRA;
terminal PAREN_ABRE, PAREN_CIERRA, COMILLAS, SUMA, RESTA, MULTIPLICACION, DIVISION, POTENCIA, IGUAL, MENOR_QUE, MAYOR_QUE, MAYOR_IGUAL, MENOR_IGUAL, FLECHA, OR, AND, NEGACION, PUNTO, PUNTO_COMA, DIGITO, ID, NUMERO;
terminal CADENA, CARACTER, PATH_TOML, DOS_PUNTOS, TRUE, FALSE;

non terminal inicial, body_html, contenido, header, parrafos, inputs, buttons, texto;
non terminal calculadora, etiqueta_toml, atributo_toml, id_etiqueta, mini_react, cuerpo_react, declaracion_variables, funciones, return_cuerpo, tipo_variable, asignacion_variable, cuerpo_funcion;

//precedence left CREAR, AGREGAR, ELIMINAR, MODIFICAR;
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence left POTENCIA;
precedence left MAYOR_QUE, MENOR_QUE, MAYOR_IGUAL, MENOR_IGUAL;
//precedence left OR, AND;
//precedence left NEGACION;
precedence left IGUAL;
precedence left LLAVE_ABRE;

start with inicial;

inicial ::= mini_react:mini {: texto = mini.toString(); :};

mini_react ::= CONST:cons ID:id IGUAL:ig FLECHA:flecha LLAVE_ABRE:la cuerpo_react:cr LLAVE_CIERRA:lc {: RESULT = cons.toString() + id.toString() + ig.toString() + flecha.toString() + la.toString() + cr.toString() + lc.toString(); :};

cuerpo_react ::= declaracion_variables:dv funciones:fn return_cuerpo:rc {: RESULT = dv.toString() + fn.toString() + rc.toString(); :};

declaracion_variables ::= VAR:var ID:id DOS_PUNTOS:dp tipo_variable:tv IGUAL:ig asignacion_variable:av {: RESULT = var.toString() + id.toString() + dp.toString() + tv.toString() + ig.toString() + av.toString(); :};

funciones ::= FUNCTION:fn ID:id PAREN_ABRE:ab PAREN_CIERRA:ci DOS_PUNTOS:puntos tipo_variable:var LLAVE_ABRE:la cuerpo_funcion:cf LLAVE_CIERRA:lc {: RESULT = fn.toString() + id.toString() + ab.toString() + ci.toString() + puntos.toString() + var.toString() + la.toString() + cf.toString() + lc.toString(); :};

return_cuerpo ::= RETURN:re PAREN_ABRE:ab body_html:body PAREN_CIERRA:ci PUNTO_COMA:pc {: RESULT = re.toString() + ab.toString() + body.toString() + ci.toString() + pc.toString(); :};

//BODY HTML
body_html ::= MENOR_QUE:iz MAIN:ma MAYOR_QUE:de contenido:cont MENOR_QUE:izq DIVISION:dia MAIN:main MAYOR_QUE:der {: RESULT = iz.toString() + ma.toString() + de.toString() + cont.toString() + izq.toString() + dia.toString() + main.toString() + der.toString(); :};

contenido ::= header:hed                    {: RESULT = hed; :}
            | parrafos:parr                 {: RESULT = parr; :}
            | inputs:inputs                 {: RESULT = inputs; :}
            | buttons:btn                   {: RESULT = btn; :};

header ::= MENOR_QUE:men H1:h texto:text MENOR_QUE:iz DIVISION:di H1:head {: RESULT = men.toString() + h.toString() + text.toString() + iz.toString() + di.toString() + head.toString(); :}
         | MENOR_QUE:men H2:h texto:text MENOR_QUE:iz DIVISION:di H2:head {: RESULT = men.toString() + h.toString() + text.toString() + iz.toString() + di.toString() + head.toString(); :}
         | MENOR_QUE:men H3:h texto:text MENOR_QUE:iz DIVISION:di H3:head {: RESULT = men.toString() + h.toString() + text.toString() + iz.toString() + di.toString() + head.toString(); :}
         | MENOR_QUE:men H4:h texto:text MENOR_QUE:iz DIVISION:di H4:head {: RESULT = men.toString() + h.toString() + text.toString() + iz.toString() + di.toString() + head.toString(); :}
         | MENOR_QUE:men H5:h texto:text MENOR_QUE:iz DIVISION:di H5:head {: RESULT = men.toString() + h.toString() + text.toString() + iz.toString() + di.toString() + head.toString(); :}
         | MENOR_QUE:men H6:h texto:text MENOR_QUE:iz DIVISION:di H6:head {: RESULT = men.toString() + h.toString() + text.toString() + iz.toString() + di.toString() + head.toString(); :};

parrafos ::= PARRAFO_ABRIR:p texto:txt PARRAFO_CERRAR:par     {: RESULT = p.toString() + txt.toString() + par.toString(); :};
//input no sirve
inputs ::= INPUT:in VALUE:val IGUAL:ig LLAVE_ABRE:abre ID:id LLAVE_CIERRA:cierre DIVISION:di MAYOR_QUE:der {: RESULT = in.toString() + val.toString() + ig.toString() + abre.toString() + id.toString() + cierre.toString() + di.toString() + der.toString(); :};
//no funciona
buttons ::= MENOR_QUE:men BUTTON:btn ONCLICK:on IGUAL:ig LLAVE_ABRE:abre ID:id LLAVE_CIERRA:cierre MAYOR_QUE:may texto:txt MENOR_QUE:iz DIVISION:div BUTTON:but MAYOR_QUE:der
{:RESULT = men.toString() + btn.toString() + on.toString() + ig.toString() + abre.toString() + id.toString() + cierre.toString() + may.toString() + txt.toString() + iz.toString() + div.toString() + but.toString() + der.toString(); :};

texto ::= ID:txt                                                  {: RESULT = txt.toString(); :}
        | ID:txt texto:texto                                      {: RESULT = txt.toString() + texto.toString(); :}
        | texto:txt LLAVE_ABRE ID:id LLAVE_CIERRA                 {: RESULT = txt.toString() + "{" + id.toString() + "}"; :}
        | texto:txt LLAVE_ABRE ID:id LLAVE_CIERRA texto:texto     {: RESULT = txt.toString() + "{" + id.toString() + "}" + texto.toString(); :};

//CALCULADORA
calculadora ::= RESTA calculadora:e1                                  {: RESULT = (-1 * ((Number)e1).doubleValue()); :}
              | calculadora:e1 SUMA:s calculadora:e2                  {: RESULT = ((Number)e1).doubleValue() + ((Number)e2).doubleValue(); :}
              | calculadora:e1 RESTA:s calculadora:e2                 {: RESULT = ((Number)e1).doubleValue() - ((Number)e2).doubleValue(); :}
              | calculadora:e1 MULTIPLICACION:s calculadora:e2        {: RESULT = ((Number)e1).doubleValue() * ((Number)e2).doubleValue(); :}
              | calculadora:e1 DIVISION:s calculadora:e2              {: if (((Number)e2).doubleValue() == 0) {
                                                                            report_error("División por cero", e2);
                                                                         }
                                                                        RESULT = ((Number)e1).doubleValue() / ((Number)e2).doubleValue(); :}
              | calculadora:e1 POTENCIA:s calculadora:e2               {: RESULT = Math.pow(((Number)e1).doubleValue(), ((Number)e2).doubleValue()); :}
              | PAREN_ABRE calculadora:e PAREN_CIERRA                  {: RESULT = ((Number)e).doubleValue(); :}
              | NUMERO:n                                               {: RESULT = ((Number)n).doubleValue(); :};